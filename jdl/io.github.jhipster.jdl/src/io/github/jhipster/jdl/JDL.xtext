/**
 * Copyright 2016-2025 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see http://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
/**
 * @author Jose Badeau - Initial contribution
 * @author Serano Colameo - Completely rewritten
 */
 
grammar io.github.jhipster.jdl.JDL with jbase.JBase hidden(WS, ML_COMMENT, SL_COMMENT)
generate jdl "http://www.github.io/jhipster/jdl/JDL"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/* =========================================================================
 * ROOT
 * ========================================================================= */

JdlDomainModel:
	features+=JdlFeature*;

JdlFeature:
	  JdlApplication 
	| JdlDeployment 
	| JdlConstant 
	| JdlEntity 
	| JdlEnum 
	| JdlRelationships 
	| JdlOption;

JdlParameter:
 	  JdlApplicationParameter 
 	| JdlDeploymentParameter;
 
/* =========================================================================
 * APPLICTION
 * ========================================================================= */ 

JdlApplication: 
	'application' '{'
		config=JdlApplicationConfig
		selection=JdlApplicationEntitiesSelection?
		exclusion=JdlExceptEntityExclusion?
		options+=JdlOption*
	'}';

JdlApplicationConfig:
	'config' {JdlApplicationConfig} '{'
		(paramters+=JdlApplicationParameter ','?)*
	'}';	

JdlApplicationEntitiesSelection:
	'entities' (predicate=JdlWildcardPredicate | selection=JdlEntitySelection);
			
JdlApplicationParameter:
	paramName=JDLApplicationParameterName paramValue=JdlParameterValue;

JdlParameterValue:
	{JdlParameterValue} 
	('[' listElements+=JdlParameterLiteral? (',' listElements+=JdlParameterLiteral)* ']')
	| (identifiers+=JdlParameterLiteral ('.' identifiers+=JdlParameterLiteral)*)
	| stringValue=STRING | numberValue=INT | version=JdlParameterVersion;

JdlParameterVersion:
	versionTag=VERSION_TAG; 

/* =========================================================================
 * DEPLOYMENT
 * ========================================================================= */ 

JdlDeployment: 
	{JdlDeployment} 'deployment' '{'
		(paramters+=JdlDeploymentParameter ','?)*
	'}';

JdlDeploymentParameter :
	paramName=JDLDeploymentParameterName paramValue=JdlParameterValue;

/* =========================================================================
 * CONSTANT
 * ========================================================================= */

JdlConstant:
	name=ValidID '=' value=SInt;

JdlNumericValue:
	constant=[JdlConstant] | value=SInt;

/* =========================================================================
 * ENTITY
 * ========================================================================= */

JdlEntity:
	annotations+=JdlAnnotation*
	'entity' name=ValidID ('(' table=ValidID ')')? ('{'
		fieldDefinition=JdlEntityFieldDefinition?
	'}')?;
	
JdlEntityFieldDefinition:
	fields+=JdlEntityField (','? fields+=JdlEntityField)*;

JdlEntityField:
	(annotations+=JdlCustomAnnotation)* name=ValidID type=JdlFieldType;

JdlFieldType:
	  JdlEnumFieldType 
	| JdlStringFieldType 
	| JdlNumericFieldType 
	| JdlBooleanFieldType 
	| JdlDateFieldType 
	| JdlBlobFieldType;

JdlEnumFieldType:
	element=[JdlEnum] validators+=JdlDefaultValidator*;

JdlStringFieldType:
	element=JdlStringType validators+=JdlStringValidator*;

JdlStringType:
	element='String';

JdlNumericFieldType:
	element=JdlNumericTypes validators+=JdlNumericValidator*;

enum JdlNumericTypes:
	Integer | Long | BigDecimal | Float | Double;

JdlBooleanFieldType:
	element=JdlBooleanType validators+=JdlDefaultValidator*;

JdlBooleanType:
	element='Boolean';

JdlDateFieldType:
	element=JdlDateTypes validators+=JdlDefaultValidator*;

enum JdlDateTypes:
	Date | LocalDate | ZonedDateTime | Instant | Duration | UUID;
	
JdlBlobFieldType:
	element=JdlBlobTypes validators+=JdlBlobValidator*;

enum JdlBlobTypes:
	Blob | AnyBlob | ImageBlob | TextBlob;

/* =========================================================================
 * VALIDATOR
 * ========================================================================= */

JdlStringValidator:
	required?=JdlRequiredValidator |
	unique?=JdlUniqueValidator |
	minlength=JdlMinLengthValidator |
	maxlength=JdlMaxLengthValidator |
	pattern=JdlPatternValidator;

JdlNumericValidator:
	required?=JdlRequiredValidator | 
	unique?=JdlUniqueValidator |
	min=JdlMinValidator | 
	max=JdlMaxValidator;

JdlBlobValidator:
	required?=JdlRequiredValidator |
	unique?=JdlUniqueValidator |
	minbytes=JdlMinBytesValidator | 
	maxbytes=JdlMaxBytesValidator;

 JdlDefaultValidator:
	required?=JdlRequiredValidator |
	unique?=JdlUniqueValidator;

JdlUniqueValidator:
	unique?='unique';

JdlRequiredValidator:
	required?='required';

JdlMinLengthValidator:
	'minlength' '(' value=JdlNumericValue ')';

JdlMaxLengthValidator:
	'maxlength' '(' value=JdlNumericValue ')';

JdlPatternValidator:
	'pattern' '(' value=REG_EXP ')';

JdlMinValidator:
	'min' '(' value=JdlNumericValue ')';

JdlMaxValidator:
	'max' '(' value=JdlNumericValue ')';

JdlMinBytesValidator:
	'minbytes' '(' value=JdlNumericValue ')';

JdlMaxBytesValidator:
	'maxbytes' '(' value=JdlNumericValue ')';

/* =========================================================================
 * RELATIONSHIP
 * ========================================================================= */

JdlRelationships:
	'relationship' cardinality=JdlCardinality '{'
		relationships+=JdlRelationship (','? relationships+=JdlRelationship)*
	'}';

JdlRelationship:
	source=JdlRelation 'to' target=JdlRelation ('with' option=JdlRelationOption)?;

JdlRelation:
	(annotations+=JdlCustomAnnotation)* entity=[JdlEntity] role=JdlRelationRole?;

JdlRelationRole:
	'{' name=ValidID ((required?=JdlRequiredValidator)? & (displayField=JdlDisplayField)?) '}';

JdlDisplayField:
    '(' name=ValidID ')';

enum JdlRelationOption:
    jpaDerivedIdentifier;

enum JdlCardinality:
	OneToMany | ManyToOne | OneToOne | ManyToMany;

/* =========================================================================
 * ENUM
 * ========================================================================= */

JdlEnum:
	'enum' name=ValidID '{'
		values+=JdlEnumValue (','? values+=JdlEnumValue)*
	'}';

JdlEnumValue:
	value=ValidID ('(' customValue=JdlEnumCustomValue ')')?;

JdlEnumCustomValue:
	INT|ValidID|STRING;

/* =========================================================================
 * ANNOTATION 
 * ========================================================================= */

JdlAnnotation:
	JdlComplexAnnotation |
	JdlSimpleAnnotation |
	JdlCustomAnnotation;

JdlComplexAnnotation:
	'@' (JdlDtoAnnotation |
	 JdlPaginateAnnotation |
	 JdlServiceAnnotation |
	 JdlMicroserviceAnnotation |
	 JdlSearchAnnotation |
	 JdlAngularSuffixAnnotation |
	 JdlClientRootFolderAnnotation);

JdlSimpleAnnotation:
	'@' (JdlSkipClientAnnotation |
		JdlSkipServerAnnotation |
		JdlFilterAnnotation |
		JdlNoFluentMethodAnnotation |
		JdlReadOnlyAnnotation |
		JdlEmbeddedAnnotation);

JdlDtoAnnotation returns JdlComplexAnnotation:
	dto?=('dto'|'Dto') '(' dtoType=JdlDtoType ')';

JdlPaginateAnnotation returns JdlComplexAnnotation:
	paginate?=('paginate'|'Paginate') '(' paginateType=JdlPaginateType ')';
	
JdlServiceAnnotation returns JdlComplexAnnotation:
	service?=('service'|'Service') '(' serviceType=JdlServiceType ')';

JdlMicroserviceAnnotation returns JdlComplexAnnotation:
	microservice?=('microservice'|'Microservice') '(' name=ValidID ')';

JdlSearchAnnotation returns JdlComplexAnnotation:
	search?=('search'|'Search') '(' searchType=JdlSearchType ')';

JdlAngularSuffixAnnotation returns JdlComplexAnnotation:
	angularSuffix?=('angularSuffix'|'AngularSuffix') '(' name=ValidID ')';

JdlClientRootFolderAnnotation returns JdlComplexAnnotation:
	clientRootFolder?=('clientRootFolder'|'ClientRootFolder');

JdlSkipClientAnnotation returns JdlSimpleAnnotation:
	skipClient?=('skipClient'|'SkipClient');

JdlSkipServerAnnotation returns JdlSimpleAnnotation:
	skipServer?=('skipServer'|'SkipServer');

JdlFilterAnnotation returns JdlSimpleAnnotation:
	skipServer?=('filter'|'Filter');

JdlNoFluentMethodAnnotation returns JdlSimpleAnnotation:
	noFluentMethod?=('noFluentMethod'|'NoFluentMethod');

JdlReadOnlyAnnotation returns JdlSimpleAnnotation:
	readOnly?=('readOnly'|'ReadOnly');

JdlEmbeddedAnnotation returns JdlSimpleAnnotation:
	embedded?=('embedded'|'Embedded');
	
JdlCustomAnnotation:
	'@' identifier=ID ('(' value=AnnotationValue ')')?;	

/* =========================================================================
 * OPTION 
 * ========================================================================= */

JdlOption:
	setting=JdlOptionSetting (excludes=JdlExceptEntityExclusion)?;

JdlOptionSetting:
	JdlDtoOption |
	JdlPaginateOption |
	JdlServiceOption |
	JdlMicroserviceOption |
	JdlSearchOption |
	JdlSkipClientOption |
	JdlSkipServerOption |
	JdlAngularSuffixOption |
	JdlClientRootFolderOption |
	JdlNoFluentMethodOption |
	JdlFilterOption |
	JdlReadOnlyOption |
	JdlEmbeddedOption;

JdlWithEntitySelectionAndValue returns JdlOptionSelection:
	(predicate=JdlWildcardPredicate | selection=JdlEntitySelection) 'with';

JdlForEntityInclusion returns JdlOptionSelection:
	(predicate=JdlWildcardPredicate | selection=JdlEntitySelection);

JdlExceptEntityExclusion:
	'except' selection=JdlEntitySelection;

JdlEntitySelection:
	entities+=[JdlEntity] (',' entities+=[JdlEntity])*;

JdlWildcardPredicate:
	wildcard?='*' | all?='all';

/* =========================================================================
 * DTO OPTION 
 * ========================================================================= */

JdlDtoOption returns JdlOptionSetting:
	dtoOption?='dto' includes=JdlWithEntitySelectionAndValue dtoType=JdlDtoType;

enum JdlDtoType:
	mapstruct;

/* =========================================================================
 * PAGINATION OPTION 
 * ========================================================================= */

JdlPaginateOption returns JdlOptionSetting:
	paginateOption?='paginate' includes=JdlWithEntitySelectionAndValue paginateType=JdlPaginateType;

JdlPaginateType:
	pagination?=('pager' | 'pagination') | infiniteScroll?='infinite-scroll';

/* =========================================================================
 * SERVICE OPTION 
 * ========================================================================= */

JdlServiceOption returns JdlOptionSetting:
	serviceOption?='service' includes=JdlWithEntitySelectionAndValue serviceType=JdlServiceType;

enum JdlServiceType:
	serviceClass | serviceImpl;

/* =========================================================================
 * MICRO SERVICE OPTION 
 * ========================================================================= */

JdlMicroserviceOption returns JdlOptionSetting:
	microserviceOption?='microservice' includes=JdlWithEntitySelectionAndValue appname=ValidID;

/* =========================================================================
 * SEARCH OPTION 
 * ========================================================================= */

JdlSearchOption returns JdlOptionSetting:
	searchOption?='search' includes=JdlWithEntitySelectionAndValue searchType=JdlSearchType;

enum JdlSearchType:
	elasticsearch;

/* =========================================================================
 * SKIP CLIENT OPTION 
 * ========================================================================= */

JdlSkipClientOption returns JdlOptionSetting:
	skipClientOption?='skipClient' includes=JdlForEntityInclusion;

/* =========================================================================
 * SKIP SERVER OPTION 
 * ========================================================================= */
JdlSkipServerOption returns JdlOptionSetting:
	skipServerOption?='skipServer' includes=JdlForEntityInclusion;

/* =========================================================================
 * ANGULAR SUFFIX OPTION 
 * ========================================================================= */
JdlAngularSuffixOption returns JdlOptionSetting:
	angularSuffixOption?='angularSuffix' includes=JdlWithEntitySelectionAndValue id=ValidID;

/* =========================================================================
 * CLIENT ROOT FOLDER OPTION 
 * ========================================================================= */

JdlClientRootFolderOption returns JdlOptionSetting:
	clientRootFolder?='clientRootFolder' includes=JdlWithEntitySelectionAndValue id=ValidID;

/* =========================================================================
 * Filter OPTION 
 * ========================================================================= */

JdlFilterOption returns JdlOptionSetting:
	filterOption?='filter' includes=JdlForEntityInclusion;

/* =========================================================================
 * NO FLUENT METHOD OPTION 
 * ========================================================================= */

JdlNoFluentMethodOption returns JdlOptionSetting:
	noFluentMethodOption?='noFluentMethod' includes=JdlForEntityInclusion;

/* =========================================================================
 * READONLY OPTION 
 * ========================================================================= */

JdlReadOnlyOption returns JdlOptionSetting:
	readOnly?='readOnly' includes=JdlForEntityInclusion;

/* =========================================================================
 * EMBEDDED OPTION 
 * ========================================================================= */

JdlEmbeddedOption returns JdlOptionSetting:
	embedded?='embedded' includes=JdlForEntityInclusion;

/* =========================================================================
 * DATA RULES
 * ========================================================================= */ 

AnnotationValue:
	ValidID | INT | STRING;

JdlParameterLiteral:
	ValidID | NUMERIC_PREFIXED_ID;

SInt: UInt | NEG_INT;
UInt: INT;

ValidID:
	ID | JdlReserverdWords;

JdlReserverdWords:
	'all' | 'application' | 'config' | 'deployment' | 'dto' | 
	'elasticsearch' | 'embedded' | 'entities' | 'entity' | 'enum' | 
	'except' | 'filter' | 'max' | 'maxbytes' | 'maxlength' | 'microservice' | 
	'min' | 'minbytes' | 'minlength' | 'pager' | 'paginate' | 
	'pagination' | 'pattern' | 'readOnly' | 'relationship' | 'search' | 
	'service' | 'skipClient' | 'skipServer' | 'to' | 'with';

/* =========================================================================
 * TERMINAL RULES
 * ========================================================================= */

terminal INT returns ecore::EInt: ('0'..'9')+;
terminal NEG_INT returns ecore::EInt: '-'? INT;    
terminal ID: ('a'..'z'|'A'..'Z'|'_'|'-') ('a'..'z'|'A'..'Z'|'_'|'-'|INT)*;
terminal NUMERIC_PREFIXED_ID returns ecore::EString: INT? ID;
terminal VERSION_TAG returns ecore::EString: '"' INT '.' INT ('.' INT)? ('-' ID)? '"';
terminal WS: (' '|'\t'|'\r'|'\n')+;
terminal STRING: '"' EXP '"' | "'" EXP "'";
terminal fragment EXP: ('\\' . | !('\\'|'"'|'\r'|'\n'))*;
terminal ML_COMMENT: '/*' -> '*/';
terminal SL_COMMENT: '//' ANY;
terminal REG_EXP: '/' ANY '/';
terminal fragment ANY: !('\n'|'\r'|'/')* ('\r'? '\n')?;

/* =========================================================================
 * END OF GRAMMAR DEFINITION 
 * ========================================================================= */
